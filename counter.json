{
  "contractName": "counter",
  "constructorInputs": [
    {
      "name": "pkh",
      "type": "bytes20"
    },
    {
      "name": "counter",
      "type": "bytes1"
    }
  ],
  "abi": [
    {
      "name": "spend",
      "covenant": false,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "increment",
      "covenant": true,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_2 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_SWAP OP_BIN2NUM OP_5 OP_GREATERTHAN OP_VERIFY OP_2 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_ROT OP_ROT OP_CHECKSIG OP_NIP OP_ELSE OP_ROT OP_1 OP_NUMEQUALVERIFY OP_2 OP_PICK OP_NOP 68 OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_7 OP_ROLL OP_7 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_9 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY OP_4 OP_ROLL OP_BIN2NUM OP_1ADD OP_1 OP_SWAP OP_1 OP_NUM2BIN OP_CAT OP_3 OP_ROLL OP_2 OP_SPLIT OP_NIP OP_CAT e803 OP_3 OP_ROLL OP_BIN2NUM OP_SWAP OP_SUB OP_8 OP_NUM2BIN 17a914 OP_CAT OP_SWAP OP_HASH160 OP_CAT 87 OP_CAT OP_HASH256 OP_EQUAL OP_NIP OP_ENDIF",
  "source": "pragma cashscript ^0.6.0;\n\ncontract counter(bytes20 pkh, byte counter) {\n    function spend(pubkey pk, sig s) {\n        require(int(counter)>5); // convert byte to int and check inequality\n        require(hash160(pk) == pkh);\n        require(checkSig(s, pk));\n    }\n    function increment(pubkey pk, sig s) { // requirement for covenants\n        require(checkSig(s, pk)); // requirement for covenants\n        int newCount = int(counter)+1;\n        bytes newContract = 0x01 + byte(newCount) + tx.bytecode.split(2)[1];\n        // cut the first two hexadecimals off, adding back push-1byte\n        // followed by the new count value as a byte \n        int minerFee = 1000; // hardcoded fee\n        bytes8 amount = bytes8(int(bytes(tx.value)) - minerFee);\n        // calculation of output amount\n        bytes32 output = new OutputP2SH(amount, hash160(newContract));\n        require(hash256(output) == tx.hashOutputs);\n    }\n}",
  "compiler": {
    "name": "cashc",
    "version": "0.6.5"
  },
  "updatedAt": "2021-11-13T13:15:57.176Z"
}